// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dictionary.proto

/*
	Package messages is a generated protocol buffer package.

	It is generated from these files:
		dictionary.proto
		KeyValue.proto

	It has these top-level messages:
		GetDictionaryCacheKeyMessage
		GetDictionaryCacheKeyReply
		DeleteDictionaryCacheKeyMessage
		DeleteDictionaryCacheKeyReply
		PostDictionaryCacheKeyMessage
		PostDictionaryCacheKeyReply
		PutDictionaryCacheValueMessage
		PutDictionaryCacheValueReply
		DeleteDictionaryCacheValueMessage
		DeleteDictionaryCacheValueReply
		PostDictionaryCacheValueMessage
		PostDictionaryCacheValueReply
		KeyValue
*/
package messages

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/duration"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GetDictionaryCacheKeyMessage struct {
	Key string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (m *GetDictionaryCacheKeyMessage) Reset()      { *m = GetDictionaryCacheKeyMessage{} }
func (*GetDictionaryCacheKeyMessage) ProtoMessage() {}
func (*GetDictionaryCacheKeyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorDictionary, []int{0}
}

func (m *GetDictionaryCacheKeyMessage) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type GetDictionaryCacheKeyReply struct {
	Key     string      `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Values  []*KeyValue `protobuf:"bytes,2,rep,name=Values" json:"Values,omitempty"`
	Success bool        `protobuf:"varint,3,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (m *GetDictionaryCacheKeyReply) Reset()      { *m = GetDictionaryCacheKeyReply{} }
func (*GetDictionaryCacheKeyReply) ProtoMessage() {}
func (*GetDictionaryCacheKeyReply) Descriptor() ([]byte, []int) {
	return fileDescriptorDictionary, []int{1}
}

func (m *GetDictionaryCacheKeyReply) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *GetDictionaryCacheKeyReply) GetValues() []*KeyValue {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *GetDictionaryCacheKeyReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type DeleteDictionaryCacheKeyMessage struct {
	Key string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (m *DeleteDictionaryCacheKeyMessage) Reset()      { *m = DeleteDictionaryCacheKeyMessage{} }
func (*DeleteDictionaryCacheKeyMessage) ProtoMessage() {}
func (*DeleteDictionaryCacheKeyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorDictionary, []int{2}
}

func (m *DeleteDictionaryCacheKeyMessage) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type DeleteDictionaryCacheKeyReply struct {
	Key           string      `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	DeletedValues []*KeyValue `protobuf:"bytes,2,rep,name=DeletedValues" json:"DeletedValues,omitempty"`
	Success       bool        `protobuf:"varint,3,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (m *DeleteDictionaryCacheKeyReply) Reset()      { *m = DeleteDictionaryCacheKeyReply{} }
func (*DeleteDictionaryCacheKeyReply) ProtoMessage() {}
func (*DeleteDictionaryCacheKeyReply) Descriptor() ([]byte, []int) {
	return fileDescriptorDictionary, []int{3}
}

func (m *DeleteDictionaryCacheKeyReply) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DeleteDictionaryCacheKeyReply) GetDeletedValues() []*KeyValue {
	if m != nil {
		return m.DeletedValues
	}
	return nil
}

func (m *DeleteDictionaryCacheKeyReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type PostDictionaryCacheKeyMessage struct {
	Key    string                    `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Values []*KeyValue               `protobuf:"bytes,2,rep,name=Values" json:"Values,omitempty"`
	TTL    *google_protobuf.Duration `protobuf:"bytes,3,opt,name=TTL" json:"TTL,omitempty"`
}

func (m *PostDictionaryCacheKeyMessage) Reset()      { *m = PostDictionaryCacheKeyMessage{} }
func (*PostDictionaryCacheKeyMessage) ProtoMessage() {}
func (*PostDictionaryCacheKeyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorDictionary, []int{4}
}

func (m *PostDictionaryCacheKeyMessage) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PostDictionaryCacheKeyMessage) GetValues() []*KeyValue {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *PostDictionaryCacheKeyMessage) GetTTL() *google_protobuf.Duration {
	if m != nil {
		return m.TTL
	}
	return nil
}

type PostDictionaryCacheKeyReply struct {
	Key     string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (m *PostDictionaryCacheKeyReply) Reset()      { *m = PostDictionaryCacheKeyReply{} }
func (*PostDictionaryCacheKeyReply) ProtoMessage() {}
func (*PostDictionaryCacheKeyReply) Descriptor() ([]byte, []int) {
	return fileDescriptorDictionary, []int{5}
}

func (m *PostDictionaryCacheKeyReply) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PostDictionaryCacheKeyReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type PutDictionaryCacheValueMessage struct {
	Key           string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	SubKey        string `protobuf:"bytes,2,opt,name=SubKey,proto3" json:"SubKey,omitempty"`
	NewValue      string `protobuf:"bytes,3,opt,name=NewValue,proto3" json:"NewValue,omitempty"`
	OriginalValue string `protobuf:"bytes,4,opt,name=OriginalValue,proto3" json:"OriginalValue,omitempty"`
}

func (m *PutDictionaryCacheValueMessage) Reset()      { *m = PutDictionaryCacheValueMessage{} }
func (*PutDictionaryCacheValueMessage) ProtoMessage() {}
func (*PutDictionaryCacheValueMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorDictionary, []int{6}
}

func (m *PutDictionaryCacheValueMessage) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PutDictionaryCacheValueMessage) GetSubKey() string {
	if m != nil {
		return m.SubKey
	}
	return ""
}

func (m *PutDictionaryCacheValueMessage) GetNewValue() string {
	if m != nil {
		return m.NewValue
	}
	return ""
}

func (m *PutDictionaryCacheValueMessage) GetOriginalValue() string {
	if m != nil {
		return m.OriginalValue
	}
	return ""
}

type PutDictionaryCacheValueReply struct {
	Key           string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	SubKey        string `protobuf:"bytes,2,opt,name=SubKey,proto3" json:"SubKey,omitempty"`
	Success       bool   `protobuf:"varint,3,opt,name=Success,proto3" json:"Success,omitempty"`
	NewValue      string `protobuf:"bytes,4,opt,name=NewValue,proto3" json:"NewValue,omitempty"`
	OriginalValue string `protobuf:"bytes,5,opt,name=OriginalValue,proto3" json:"OriginalValue,omitempty"`
}

func (m *PutDictionaryCacheValueReply) Reset()      { *m = PutDictionaryCacheValueReply{} }
func (*PutDictionaryCacheValueReply) ProtoMessage() {}
func (*PutDictionaryCacheValueReply) Descriptor() ([]byte, []int) {
	return fileDescriptorDictionary, []int{7}
}

func (m *PutDictionaryCacheValueReply) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PutDictionaryCacheValueReply) GetSubKey() string {
	if m != nil {
		return m.SubKey
	}
	return ""
}

func (m *PutDictionaryCacheValueReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PutDictionaryCacheValueReply) GetNewValue() string {
	if m != nil {
		return m.NewValue
	}
	return ""
}

func (m *PutDictionaryCacheValueReply) GetOriginalValue() string {
	if m != nil {
		return m.OriginalValue
	}
	return ""
}

type DeleteDictionaryCacheValueMessage struct {
	Key    string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	SubKey string `protobuf:"bytes,2,opt,name=SubKey,proto3" json:"SubKey,omitempty"`
}

func (m *DeleteDictionaryCacheValueMessage) Reset()      { *m = DeleteDictionaryCacheValueMessage{} }
func (*DeleteDictionaryCacheValueMessage) ProtoMessage() {}
func (*DeleteDictionaryCacheValueMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorDictionary, []int{8}
}

func (m *DeleteDictionaryCacheValueMessage) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DeleteDictionaryCacheValueMessage) GetSubKey() string {
	if m != nil {
		return m.SubKey
	}
	return ""
}

type DeleteDictionaryCacheValueReply struct {
	Key          string    `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	SubKey       string    `protobuf:"bytes,2,opt,name=SubKey,proto3" json:"SubKey,omitempty"`
	DeletedValue *KeyValue `protobuf:"bytes,3,opt,name=DeletedValue" json:"DeletedValue,omitempty"`
	Success      bool      `protobuf:"varint,4,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (m *DeleteDictionaryCacheValueReply) Reset()      { *m = DeleteDictionaryCacheValueReply{} }
func (*DeleteDictionaryCacheValueReply) ProtoMessage() {}
func (*DeleteDictionaryCacheValueReply) Descriptor() ([]byte, []int) {
	return fileDescriptorDictionary, []int{9}
}

func (m *DeleteDictionaryCacheValueReply) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DeleteDictionaryCacheValueReply) GetSubKey() string {
	if m != nil {
		return m.SubKey
	}
	return ""
}

func (m *DeleteDictionaryCacheValueReply) GetDeletedValue() *KeyValue {
	if m != nil {
		return m.DeletedValue
	}
	return nil
}

func (m *DeleteDictionaryCacheValueReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type PostDictionaryCacheValueMessage struct {
	Key      string    `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	NewValue *KeyValue `protobuf:"bytes,2,opt,name=NewValue" json:"NewValue,omitempty"`
}

func (m *PostDictionaryCacheValueMessage) Reset()      { *m = PostDictionaryCacheValueMessage{} }
func (*PostDictionaryCacheValueMessage) ProtoMessage() {}
func (*PostDictionaryCacheValueMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorDictionary, []int{10}
}

func (m *PostDictionaryCacheValueMessage) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PostDictionaryCacheValueMessage) GetNewValue() *KeyValue {
	if m != nil {
		return m.NewValue
	}
	return nil
}

type PostDictionaryCacheValueReply struct {
	Key        string    `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Success    bool      `protobuf:"varint,2,opt,name=Success,proto3" json:"Success,omitempty"`
	AddedValue *KeyValue `protobuf:"bytes,3,opt,name=AddedValue" json:"AddedValue,omitempty"`
}

func (m *PostDictionaryCacheValueReply) Reset()      { *m = PostDictionaryCacheValueReply{} }
func (*PostDictionaryCacheValueReply) ProtoMessage() {}
func (*PostDictionaryCacheValueReply) Descriptor() ([]byte, []int) {
	return fileDescriptorDictionary, []int{11}
}

func (m *PostDictionaryCacheValueReply) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PostDictionaryCacheValueReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PostDictionaryCacheValueReply) GetAddedValue() *KeyValue {
	if m != nil {
		return m.AddedValue
	}
	return nil
}

func init() {
	proto.RegisterType((*GetDictionaryCacheKeyMessage)(nil), "messages.GetDictionaryCacheKeyMessage")
	proto.RegisterType((*GetDictionaryCacheKeyReply)(nil), "messages.GetDictionaryCacheKeyReply")
	proto.RegisterType((*DeleteDictionaryCacheKeyMessage)(nil), "messages.DeleteDictionaryCacheKeyMessage")
	proto.RegisterType((*DeleteDictionaryCacheKeyReply)(nil), "messages.DeleteDictionaryCacheKeyReply")
	proto.RegisterType((*PostDictionaryCacheKeyMessage)(nil), "messages.PostDictionaryCacheKeyMessage")
	proto.RegisterType((*PostDictionaryCacheKeyReply)(nil), "messages.PostDictionaryCacheKeyReply")
	proto.RegisterType((*PutDictionaryCacheValueMessage)(nil), "messages.PutDictionaryCacheValueMessage")
	proto.RegisterType((*PutDictionaryCacheValueReply)(nil), "messages.PutDictionaryCacheValueReply")
	proto.RegisterType((*DeleteDictionaryCacheValueMessage)(nil), "messages.DeleteDictionaryCacheValueMessage")
	proto.RegisterType((*DeleteDictionaryCacheValueReply)(nil), "messages.DeleteDictionaryCacheValueReply")
	proto.RegisterType((*PostDictionaryCacheValueMessage)(nil), "messages.PostDictionaryCacheValueMessage")
	proto.RegisterType((*PostDictionaryCacheValueReply)(nil), "messages.PostDictionaryCacheValueReply")
}
func (this *GetDictionaryCacheKeyMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetDictionaryCacheKeyMessage)
	if !ok {
		that2, ok := that.(GetDictionaryCacheKeyMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	return true
}
func (this *GetDictionaryCacheKeyReply) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetDictionaryCacheKeyReply)
	if !ok {
		that2, ok := that.(GetDictionaryCacheKeyReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !this.Values[i].Equal(that1.Values[i]) {
			return false
		}
	}
	if this.Success != that1.Success {
		return false
	}
	return true
}
func (this *DeleteDictionaryCacheKeyMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteDictionaryCacheKeyMessage)
	if !ok {
		that2, ok := that.(DeleteDictionaryCacheKeyMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	return true
}
func (this *DeleteDictionaryCacheKeyReply) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteDictionaryCacheKeyReply)
	if !ok {
		that2, ok := that.(DeleteDictionaryCacheKeyReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if len(this.DeletedValues) != len(that1.DeletedValues) {
		return false
	}
	for i := range this.DeletedValues {
		if !this.DeletedValues[i].Equal(that1.DeletedValues[i]) {
			return false
		}
	}
	if this.Success != that1.Success {
		return false
	}
	return true
}
func (this *PostDictionaryCacheKeyMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PostDictionaryCacheKeyMessage)
	if !ok {
		that2, ok := that.(PostDictionaryCacheKeyMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !this.Values[i].Equal(that1.Values[i]) {
			return false
		}
	}
	if !this.TTL.Equal(that1.TTL) {
		return false
	}
	return true
}
func (this *PostDictionaryCacheKeyReply) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PostDictionaryCacheKeyReply)
	if !ok {
		that2, ok := that.(PostDictionaryCacheKeyReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	return true
}
func (this *PutDictionaryCacheValueMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PutDictionaryCacheValueMessage)
	if !ok {
		that2, ok := that.(PutDictionaryCacheValueMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.SubKey != that1.SubKey {
		return false
	}
	if this.NewValue != that1.NewValue {
		return false
	}
	if this.OriginalValue != that1.OriginalValue {
		return false
	}
	return true
}
func (this *PutDictionaryCacheValueReply) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PutDictionaryCacheValueReply)
	if !ok {
		that2, ok := that.(PutDictionaryCacheValueReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.SubKey != that1.SubKey {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if this.NewValue != that1.NewValue {
		return false
	}
	if this.OriginalValue != that1.OriginalValue {
		return false
	}
	return true
}
func (this *DeleteDictionaryCacheValueMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteDictionaryCacheValueMessage)
	if !ok {
		that2, ok := that.(DeleteDictionaryCacheValueMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.SubKey != that1.SubKey {
		return false
	}
	return true
}
func (this *DeleteDictionaryCacheValueReply) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteDictionaryCacheValueReply)
	if !ok {
		that2, ok := that.(DeleteDictionaryCacheValueReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.SubKey != that1.SubKey {
		return false
	}
	if !this.DeletedValue.Equal(that1.DeletedValue) {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	return true
}
func (this *PostDictionaryCacheValueMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PostDictionaryCacheValueMessage)
	if !ok {
		that2, ok := that.(PostDictionaryCacheValueMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if !this.NewValue.Equal(that1.NewValue) {
		return false
	}
	return true
}
func (this *PostDictionaryCacheValueReply) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PostDictionaryCacheValueReply)
	if !ok {
		that2, ok := that.(PostDictionaryCacheValueReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if !this.AddedValue.Equal(that1.AddedValue) {
		return false
	}
	return true
}
func (this *GetDictionaryCacheKeyMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&messages.GetDictionaryCacheKeyMessage{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDictionaryCacheKeyReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&messages.GetDictionaryCacheKeyReply{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	s = append(s, "Success: "+fmt.Sprintf("%#v", this.Success)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteDictionaryCacheKeyMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&messages.DeleteDictionaryCacheKeyMessage{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteDictionaryCacheKeyReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&messages.DeleteDictionaryCacheKeyReply{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	if this.DeletedValues != nil {
		s = append(s, "DeletedValues: "+fmt.Sprintf("%#v", this.DeletedValues)+",\n")
	}
	s = append(s, "Success: "+fmt.Sprintf("%#v", this.Success)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PostDictionaryCacheKeyMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&messages.PostDictionaryCacheKeyMessage{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	if this.TTL != nil {
		s = append(s, "TTL: "+fmt.Sprintf("%#v", this.TTL)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PostDictionaryCacheKeyReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.PostDictionaryCacheKeyReply{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Success: "+fmt.Sprintf("%#v", this.Success)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PutDictionaryCacheValueMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&messages.PutDictionaryCacheValueMessage{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "SubKey: "+fmt.Sprintf("%#v", this.SubKey)+",\n")
	s = append(s, "NewValue: "+fmt.Sprintf("%#v", this.NewValue)+",\n")
	s = append(s, "OriginalValue: "+fmt.Sprintf("%#v", this.OriginalValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PutDictionaryCacheValueReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&messages.PutDictionaryCacheValueReply{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "SubKey: "+fmt.Sprintf("%#v", this.SubKey)+",\n")
	s = append(s, "Success: "+fmt.Sprintf("%#v", this.Success)+",\n")
	s = append(s, "NewValue: "+fmt.Sprintf("%#v", this.NewValue)+",\n")
	s = append(s, "OriginalValue: "+fmt.Sprintf("%#v", this.OriginalValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteDictionaryCacheValueMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.DeleteDictionaryCacheValueMessage{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "SubKey: "+fmt.Sprintf("%#v", this.SubKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteDictionaryCacheValueReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&messages.DeleteDictionaryCacheValueReply{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "SubKey: "+fmt.Sprintf("%#v", this.SubKey)+",\n")
	if this.DeletedValue != nil {
		s = append(s, "DeletedValue: "+fmt.Sprintf("%#v", this.DeletedValue)+",\n")
	}
	s = append(s, "Success: "+fmt.Sprintf("%#v", this.Success)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PostDictionaryCacheValueMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.PostDictionaryCacheValueMessage{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	if this.NewValue != nil {
		s = append(s, "NewValue: "+fmt.Sprintf("%#v", this.NewValue)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PostDictionaryCacheValueReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&messages.PostDictionaryCacheValueReply{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Success: "+fmt.Sprintf("%#v", this.Success)+",\n")
	if this.AddedValue != nil {
		s = append(s, "AddedValue: "+fmt.Sprintf("%#v", this.AddedValue)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDictionary(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GetDictionaryCacheKeyMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDictionaryCacheKeyMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDictionary(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *GetDictionaryCacheKeyReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDictionaryCacheKeyReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDictionary(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Values) > 0 {
		for _, msg := range m.Values {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDictionary(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Success {
		dAtA[i] = 0x18
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *DeleteDictionaryCacheKeyMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteDictionaryCacheKeyMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDictionary(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *DeleteDictionaryCacheKeyReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteDictionaryCacheKeyReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDictionary(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.DeletedValues) > 0 {
		for _, msg := range m.DeletedValues {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDictionary(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Success {
		dAtA[i] = 0x18
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *PostDictionaryCacheKeyMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostDictionaryCacheKeyMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDictionary(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Values) > 0 {
		for _, msg := range m.Values {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDictionary(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TTL != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDictionary(dAtA, i, uint64(m.TTL.Size()))
		n1, err := m.TTL.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *PostDictionaryCacheKeyReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostDictionaryCacheKeyReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDictionary(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Success {
		dAtA[i] = 0x10
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *PutDictionaryCacheValueMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutDictionaryCacheValueMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDictionary(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.SubKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDictionary(dAtA, i, uint64(len(m.SubKey)))
		i += copy(dAtA[i:], m.SubKey)
	}
	if len(m.NewValue) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDictionary(dAtA, i, uint64(len(m.NewValue)))
		i += copy(dAtA[i:], m.NewValue)
	}
	if len(m.OriginalValue) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDictionary(dAtA, i, uint64(len(m.OriginalValue)))
		i += copy(dAtA[i:], m.OriginalValue)
	}
	return i, nil
}

func (m *PutDictionaryCacheValueReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutDictionaryCacheValueReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDictionary(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.SubKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDictionary(dAtA, i, uint64(len(m.SubKey)))
		i += copy(dAtA[i:], m.SubKey)
	}
	if m.Success {
		dAtA[i] = 0x18
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.NewValue) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDictionary(dAtA, i, uint64(len(m.NewValue)))
		i += copy(dAtA[i:], m.NewValue)
	}
	if len(m.OriginalValue) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDictionary(dAtA, i, uint64(len(m.OriginalValue)))
		i += copy(dAtA[i:], m.OriginalValue)
	}
	return i, nil
}

func (m *DeleteDictionaryCacheValueMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteDictionaryCacheValueMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDictionary(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.SubKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDictionary(dAtA, i, uint64(len(m.SubKey)))
		i += copy(dAtA[i:], m.SubKey)
	}
	return i, nil
}

func (m *DeleteDictionaryCacheValueReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteDictionaryCacheValueReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDictionary(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.SubKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDictionary(dAtA, i, uint64(len(m.SubKey)))
		i += copy(dAtA[i:], m.SubKey)
	}
	if m.DeletedValue != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDictionary(dAtA, i, uint64(m.DeletedValue.Size()))
		n2, err := m.DeletedValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Success {
		dAtA[i] = 0x20
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *PostDictionaryCacheValueMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostDictionaryCacheValueMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDictionary(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.NewValue != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDictionary(dAtA, i, uint64(m.NewValue.Size()))
		n3, err := m.NewValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *PostDictionaryCacheValueReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostDictionaryCacheValueReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDictionary(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Success {
		dAtA[i] = 0x10
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AddedValue != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDictionary(dAtA, i, uint64(m.AddedValue.Size()))
		n4, err := m.AddedValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func encodeFixed64Dictionary(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Dictionary(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDictionary(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetDictionaryCacheKeyMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovDictionary(uint64(l))
	}
	return n
}

func (m *GetDictionaryCacheKeyReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovDictionary(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovDictionary(uint64(l))
		}
	}
	if m.Success {
		n += 2
	}
	return n
}

func (m *DeleteDictionaryCacheKeyMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovDictionary(uint64(l))
	}
	return n
}

func (m *DeleteDictionaryCacheKeyReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovDictionary(uint64(l))
	}
	if len(m.DeletedValues) > 0 {
		for _, e := range m.DeletedValues {
			l = e.Size()
			n += 1 + l + sovDictionary(uint64(l))
		}
	}
	if m.Success {
		n += 2
	}
	return n
}

func (m *PostDictionaryCacheKeyMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovDictionary(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovDictionary(uint64(l))
		}
	}
	if m.TTL != nil {
		l = m.TTL.Size()
		n += 1 + l + sovDictionary(uint64(l))
	}
	return n
}

func (m *PostDictionaryCacheKeyReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovDictionary(uint64(l))
	}
	if m.Success {
		n += 2
	}
	return n
}

func (m *PutDictionaryCacheValueMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovDictionary(uint64(l))
	}
	l = len(m.SubKey)
	if l > 0 {
		n += 1 + l + sovDictionary(uint64(l))
	}
	l = len(m.NewValue)
	if l > 0 {
		n += 1 + l + sovDictionary(uint64(l))
	}
	l = len(m.OriginalValue)
	if l > 0 {
		n += 1 + l + sovDictionary(uint64(l))
	}
	return n
}

func (m *PutDictionaryCacheValueReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovDictionary(uint64(l))
	}
	l = len(m.SubKey)
	if l > 0 {
		n += 1 + l + sovDictionary(uint64(l))
	}
	if m.Success {
		n += 2
	}
	l = len(m.NewValue)
	if l > 0 {
		n += 1 + l + sovDictionary(uint64(l))
	}
	l = len(m.OriginalValue)
	if l > 0 {
		n += 1 + l + sovDictionary(uint64(l))
	}
	return n
}

func (m *DeleteDictionaryCacheValueMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovDictionary(uint64(l))
	}
	l = len(m.SubKey)
	if l > 0 {
		n += 1 + l + sovDictionary(uint64(l))
	}
	return n
}

func (m *DeleteDictionaryCacheValueReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovDictionary(uint64(l))
	}
	l = len(m.SubKey)
	if l > 0 {
		n += 1 + l + sovDictionary(uint64(l))
	}
	if m.DeletedValue != nil {
		l = m.DeletedValue.Size()
		n += 1 + l + sovDictionary(uint64(l))
	}
	if m.Success {
		n += 2
	}
	return n
}

func (m *PostDictionaryCacheValueMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovDictionary(uint64(l))
	}
	if m.NewValue != nil {
		l = m.NewValue.Size()
		n += 1 + l + sovDictionary(uint64(l))
	}
	return n
}

func (m *PostDictionaryCacheValueReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovDictionary(uint64(l))
	}
	if m.Success {
		n += 2
	}
	if m.AddedValue != nil {
		l = m.AddedValue.Size()
		n += 1 + l + sovDictionary(uint64(l))
	}
	return n
}

func sovDictionary(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDictionary(x uint64) (n int) {
	return sovDictionary(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetDictionaryCacheKeyMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDictionaryCacheKeyMessage{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDictionaryCacheKeyReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDictionaryCacheKeyReply{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Values:` + strings.Replace(fmt.Sprintf("%v", this.Values), "KeyValue", "KeyValue", 1) + `,`,
		`Success:` + fmt.Sprintf("%v", this.Success) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteDictionaryCacheKeyMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteDictionaryCacheKeyMessage{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteDictionaryCacheKeyReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteDictionaryCacheKeyReply{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`DeletedValues:` + strings.Replace(fmt.Sprintf("%v", this.DeletedValues), "KeyValue", "KeyValue", 1) + `,`,
		`Success:` + fmt.Sprintf("%v", this.Success) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostDictionaryCacheKeyMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PostDictionaryCacheKeyMessage{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Values:` + strings.Replace(fmt.Sprintf("%v", this.Values), "KeyValue", "KeyValue", 1) + `,`,
		`TTL:` + strings.Replace(fmt.Sprintf("%v", this.TTL), "Duration", "google_protobuf.Duration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostDictionaryCacheKeyReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PostDictionaryCacheKeyReply{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Success:` + fmt.Sprintf("%v", this.Success) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PutDictionaryCacheValueMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PutDictionaryCacheValueMessage{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`SubKey:` + fmt.Sprintf("%v", this.SubKey) + `,`,
		`NewValue:` + fmt.Sprintf("%v", this.NewValue) + `,`,
		`OriginalValue:` + fmt.Sprintf("%v", this.OriginalValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PutDictionaryCacheValueReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PutDictionaryCacheValueReply{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`SubKey:` + fmt.Sprintf("%v", this.SubKey) + `,`,
		`Success:` + fmt.Sprintf("%v", this.Success) + `,`,
		`NewValue:` + fmt.Sprintf("%v", this.NewValue) + `,`,
		`OriginalValue:` + fmt.Sprintf("%v", this.OriginalValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteDictionaryCacheValueMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteDictionaryCacheValueMessage{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`SubKey:` + fmt.Sprintf("%v", this.SubKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteDictionaryCacheValueReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteDictionaryCacheValueReply{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`SubKey:` + fmt.Sprintf("%v", this.SubKey) + `,`,
		`DeletedValue:` + strings.Replace(fmt.Sprintf("%v", this.DeletedValue), "KeyValue", "KeyValue", 1) + `,`,
		`Success:` + fmt.Sprintf("%v", this.Success) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostDictionaryCacheValueMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PostDictionaryCacheValueMessage{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`NewValue:` + strings.Replace(fmt.Sprintf("%v", this.NewValue), "KeyValue", "KeyValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostDictionaryCacheValueReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PostDictionaryCacheValueReply{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Success:` + fmt.Sprintf("%v", this.Success) + `,`,
		`AddedValue:` + strings.Replace(fmt.Sprintf("%v", this.AddedValue), "KeyValue", "KeyValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDictionary(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetDictionaryCacheKeyMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDictionary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDictionaryCacheKeyMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDictionaryCacheKeyMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDictionary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDictionary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDictionary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDictionaryCacheKeyReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDictionary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDictionaryCacheKeyReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDictionaryCacheKeyReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDictionary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDictionary
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &KeyValue{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDictionary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDictionary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteDictionaryCacheKeyMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDictionary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteDictionaryCacheKeyMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteDictionaryCacheKeyMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDictionary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDictionary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDictionary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteDictionaryCacheKeyReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDictionary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteDictionaryCacheKeyReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteDictionaryCacheKeyReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDictionary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDictionary
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedValues = append(m.DeletedValues, &KeyValue{})
			if err := m.DeletedValues[len(m.DeletedValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDictionary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDictionary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostDictionaryCacheKeyMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDictionary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostDictionaryCacheKeyMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostDictionaryCacheKeyMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDictionary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDictionary
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &KeyValue{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TTL", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDictionary
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TTL == nil {
				m.TTL = &google_protobuf.Duration{}
			}
			if err := m.TTL.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDictionary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDictionary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostDictionaryCacheKeyReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDictionary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostDictionaryCacheKeyReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostDictionaryCacheKeyReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDictionary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDictionary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDictionary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutDictionaryCacheValueMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDictionary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutDictionaryCacheValueMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutDictionaryCacheValueMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDictionary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDictionary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDictionary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDictionary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDictionary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDictionary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutDictionaryCacheValueReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDictionary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutDictionaryCacheValueReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutDictionaryCacheValueReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDictionary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDictionary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDictionary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDictionary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDictionary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDictionary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteDictionaryCacheValueMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDictionary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteDictionaryCacheValueMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteDictionaryCacheValueMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDictionary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDictionary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDictionary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDictionary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteDictionaryCacheValueReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDictionary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteDictionaryCacheValueReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteDictionaryCacheValueReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDictionary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDictionary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDictionary
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletedValue == nil {
				m.DeletedValue = &KeyValue{}
			}
			if err := m.DeletedValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDictionary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDictionary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostDictionaryCacheValueMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDictionary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostDictionaryCacheValueMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostDictionaryCacheValueMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDictionary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDictionary
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewValue == nil {
				m.NewValue = &KeyValue{}
			}
			if err := m.NewValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDictionary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDictionary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostDictionaryCacheValueReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDictionary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostDictionaryCacheValueReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostDictionaryCacheValueReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDictionary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDictionary
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddedValue == nil {
				m.AddedValue = &KeyValue{}
			}
			if err := m.AddedValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDictionary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDictionary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDictionary(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDictionary
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDictionary
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDictionary
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDictionary
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDictionary(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDictionary = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDictionary   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dictionary.proto", fileDescriptorDictionary) }

var fileDescriptorDictionary = []byte{
	// 478 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x93, 0xbf, 0x8e, 0xd3, 0x40,
	0x10, 0xc6, 0xbd, 0x76, 0x08, 0xb9, 0x39, 0x0e, 0x9d, 0xb6, 0x40, 0xc6, 0xdc, 0xed, 0x05, 0x8b,
	0x22, 0x02, 0xe4, 0x43, 0x39, 0x09, 0xd1, 0x02, 0x91, 0x10, 0x0a, 0x81, 0xc8, 0x89, 0xe8, 0x1d,
	0x7b, 0x31, 0x96, 0x4c, 0x1c, 0xf9, 0x8f, 0x90, 0x2b, 0x68, 0x68, 0x10, 0x05, 0x2f, 0x40, 0x47,
	0xc1, 0xa3, 0x50, 0xa6, 0xa4, 0x24, 0xa6, 0xa1, 0xcc, 0x23, 0x20, 0xaf, 0xed, 0xc8, 0xe6, 0xbc,
	0xb1, 0x92, 0xce, 0x33, 0xfa, 0x66, 0xf7, 0x37, 0x9f, 0xbf, 0x85, 0x63, 0xcb, 0x31, 0x43, 0xc7,
	0x9b, 0x1b, 0x7e, 0xac, 0x2d, 0x7c, 0x2f, 0xf4, 0x70, 0xe7, 0x1d, 0x0d, 0x02, 0xc3, 0xa6, 0x81,
	0x42, 0x6c, 0xcf, 0xb3, 0x5d, 0x7a, 0xce, 0xfa, 0xb3, 0xe8, 0xcd, 0xb9, 0x15, 0xf9, 0x46, 0x2a,
	0xce, 0x94, 0xca, 0xf5, 0x21, 0x8d, 0x5f, 0x1b, 0x6e, 0x44, 0xb3, 0x5a, 0x7d, 0x00, 0x27, 0xcf,
	0x68, 0x38, 0xd8, 0x1c, 0xf8, 0xd4, 0x30, 0xdf, 0xd2, 0x21, 0x8d, 0x47, 0xd9, 0x81, 0xf8, 0x18,
	0xa4, 0x21, 0x8d, 0x65, 0xd4, 0x45, 0xbd, 0x03, 0x3d, 0xfd, 0x54, 0x43, 0x50, 0x6a, 0x27, 0x74,
	0xba, 0x70, 0xe3, 0xcb, 0x7a, 0x7c, 0x17, 0xda, 0xec, 0xc2, 0x40, 0x16, 0xbb, 0x52, 0xef, 0xb0,
	0x8f, 0xb5, 0x02, 0x56, 0x2b, 0x58, 0xf4, 0x5c, 0x81, 0x65, 0xb8, 0x3a, 0x89, 0x4c, 0x93, 0x06,
	0x81, 0x2c, 0x75, 0x51, 0xaf, 0xa3, 0x17, 0xa5, 0x7a, 0x01, 0x67, 0x03, 0xea, 0xd2, 0x90, 0xee,
	0x82, 0xfa, 0x09, 0xc1, 0x29, 0x6f, 0x8a, 0x87, 0xfb, 0x08, 0x8e, 0xb2, 0x11, 0xab, 0x91, 0xba,
	0x2a, 0xdc, 0x02, 0xff, 0x19, 0xc1, 0xe9, 0xd8, 0x0b, 0x76, 0xb1, 0x79, 0x27, 0xdb, 0xee, 0x81,
	0x34, 0x9d, 0xbe, 0x60, 0xb7, 0x1e, 0xf6, 0x6f, 0x6a, 0x59, 0x04, 0xb4, 0x22, 0x02, 0xda, 0x20,
	0x8f, 0x80, 0x9e, 0xaa, 0xd4, 0xe7, 0x70, 0xab, 0x9e, 0x85, 0xe7, 0x48, 0x69, 0x2f, 0xb1, 0xba,
	0xd7, 0x17, 0x04, 0x64, 0x1c, 0xfd, 0x7f, 0x14, 0x83, 0xe2, 0x2f, 0x76, 0x03, 0xda, 0x93, 0x68,
	0x96, 0x36, 0x45, 0xd6, 0xcc, 0x2b, 0xac, 0x40, 0xe7, 0x25, 0x7d, 0xcf, 0x86, 0xd9, 0x26, 0x07,
	0xfa, 0xa6, 0xc6, 0x77, 0xe0, 0xe8, 0x95, 0xef, 0xd8, 0xce, 0xdc, 0x70, 0x33, 0x41, 0x8b, 0x09,
	0xaa, 0x4d, 0xf5, 0x3b, 0x82, 0x13, 0x0e, 0x0e, 0x6f, 0x37, 0x1e, 0x0c, 0xf7, 0x5f, 0x56, 0x30,
	0x5b, 0x4d, 0x98, 0x57, 0xea, 0x30, 0x47, 0x70, 0xbb, 0x36, 0x94, 0xfb, 0xf9, 0xa6, 0x7e, 0x43,
	0x9c, 0xa7, 0xb1, 0xd7, 0xe2, 0x0f, 0xe1, 0x5a, 0x39, 0xd5, 0x79, 0xa6, 0xea, 0xc2, 0x57, 0xd1,
	0x95, 0x0d, 0x6b, 0x55, 0x43, 0x62, 0xc2, 0x59, 0x4d, 0xde, 0x1a, 0x96, 0xd5, 0x4a, 0x2e, 0x8b,
	0x5c, 0x84, 0x8d, 0x46, 0xfd, 0x50, 0xfb, 0xc0, 0xb6, 0x3a, 0xc0, 0x8d, 0x35, 0xee, 0x03, 0x3c,
	0xb6, 0xac, 0x66, 0x07, 0x4a, 0xaa, 0x27, 0xf7, 0x97, 0x2b, 0x22, 0xfc, 0x5a, 0x11, 0x61, 0xbd,
	0x22, 0xe8, 0x63, 0x42, 0xd0, 0x8f, 0x84, 0xa0, 0x9f, 0x09, 0x41, 0xcb, 0x84, 0xa0, 0xdf, 0x09,
	0x41, 0x7f, 0x13, 0x22, 0xac, 0x13, 0x82, 0xbe, 0xfe, 0x21, 0xc2, 0xac, 0xcd, 0xde, 0xe6, 0xc5,
	0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x75, 0x08, 0x0a, 0x6a, 0xca, 0x05, 0x00, 0x00,
}
